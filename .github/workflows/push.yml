# SPDX-License-Identifier: Apache-2.0
# Copyright 2024 Intel Corporation
# Copyright 2024 Kyunghee University
name: GitHub release and Docker images

on:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  push-images:  
    runs-on: ubuntu-latest
    if: github.repository_owner == 'khu-mcl'  
    env:
      REGISTRY: docker.io
      DOCKER_REPOSITORY: khusdran/
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - run: echo GIT_SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - uses: docker/login-action@v3.1.0 
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image with tag latest
        env:
          DOCKER_TAG: latest
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          git clone https://github.com/onosproject/build-tools.git build/build-tools
          make images
          make docker-push

  # CAUTION: Other actions depend on this name "tag-github"
  tag-github:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'khu-mcl'
    outputs: # 이렇게 명시해주면 다른 job들도 이 output들을 사용할 수 있음.
      changed: ${{ steps.version-change.outputs.changed }}  
      version: ${{ steps.version-change.outputs.version }}
      release_branch: ${{ steps.version-change.outputs.release_branch }}
      version_branch: ${{ steps.version-change.outputs.version_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes 
        id: version-file
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep VERSION; then
            echo "changed=true" >> $GITHUB_OUTPUT
            version_before=$(git show ${{ github.event.before }}:VERSION)
            echo "version_before=$version_before" >> $GITHUB_OUTPUT
          else
            echo "VERSION file was not changed"
          fi
        # 1. 두 commit(혹은 state) 사이에서 변경된 파일 이름만을 출력해서 변경 여부 체크
        # 2. git show로 특정 커밋에서 VERSION 파일의 내용을 version_before에 저장
        # 3. $version_before로 저장된 값을 가져와서 GITHUB_OUTPUT 파일에 추가
        # $ : 명령어 치환을 사용하면 명령어의 출력 결과를 변수에 할당하거나 다른 명령어의 인자로 사용

      - name: Validate change in version file
        id: version-change
        if: steps.version-file.outputs.changed == 'true'       
        run: |
          version=$(cat VERSION)
          version_before_full=${{ steps.version-file.outputs.version_before }}
          version_before=${version_before_full::-4}
          echo "version=$version"
          echo "version_before=$version_before"
          validate="^[0-9]+\.[0-9]+\.[0-9]+$"
          # version이 validate 정규 표현식 패턴과 일치하는지 확인합니다.
          if [[ $version =~ $validate ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "Version change not for release"
          fi
          if [[ $version_before =~ $validate ]]; then
            IFS='.' read -r major minor patch <<< "$version"
            IFS='.' read -r major_b minor_b patch_b <<< "$version_before"
            if [[ "$major" -ne "$major_b" ]] || [[ "$minor" -ne "$minor_b" ]]; then
              version_branch="$major_b.$minor_b"
              echo "release_branch=true" >> $GITHUB_OUTPUT
              echo "version_branch=$version_branch" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version change not for branch release"
          fi
        

      - name: Create release using REST API
        if: steps.version-change.outputs.changed == 'true'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "v${{ steps.version-change.outputs.version }}",
              "target_commitish": "${{ github.event.repository.default_branch }}",
              "name": "v${{ steps.version-change.outputs.version }}",
              "draft": false,
              "prerelease": false,
              "generate_release_notes": true
              }'

  release-image:
    runs-on: ubuntu-latest
    needs: tag-github 
    if: needs.tag-github.outputs.changed == 'true'  
    env:
      REGISTRY: docker.io
      DOCKER_REPOSITORY: khusdran/
    steps:
      - uses: actions/checkout@v4
  
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
  
      - uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Build and push release Docker image
        env:
          DOCKER_TAG: ${{ needs.tag-github.outputs.version }}
        run: |
          git clone https://github.com/onosproject/build-tools.git build/build-tools
          make images
          make docker-push

  update-version:
    runs-on: ubuntu-latest
    needs: tag-github
    if: needs.tag-github.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Increment version
        run: |
          version=${{ needs.tag-github.outputs.version }}
          IFS='.' read -r major minor patch <<< "$version"
          patch_update=$((patch+1))
          NEW_VERSION="$major.$minor.$patch_update-dev"
          echo $NEW_VERSION > VERSION
          echo "Updated version: $NEW_VERSION"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: Update version
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: version-update
          delete-branch: true
          title: Update version
          body: |
            Update VERSION file
          add-paths: |
            VERSION

#  branch-release:
#    runs-on: ubuntu-latest
#    needs: tag-github
#    if: (needs.tag-github.outputs.changed == 'true') && (needs.tag-github.outputs.release_branch == 'true')
#    env:
#      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: peterjgrainger/action-create-branch@v3.0.0
#        with:
#          branch: "rel-${{ needs.tag-github.outputs.version_branch }}"
#          sha: '${{ github.event.pull_request.head.sha }}'